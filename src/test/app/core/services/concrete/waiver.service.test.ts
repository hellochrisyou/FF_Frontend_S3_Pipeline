/*
 * File generated by Test generator (dotup.dotup-vscode-test-generator)
 * Date: 2019-11-17 09:43:39
*/
import { expect } from 'chai';
import { WaiverService } from '../../../../../app/core/services/concrete/waiver.service';
import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { ApiService } from '../../../../../app/core/services/api/api.service';
import { FilterService } from '../../../../../app/core/services/logic/filter.service';
import { NotifyService } from '../../../../../app/core/services/emit/notify.service';
import { StatsFunctionService } from '../../../../../app/core/services/logic/stats-function.service';
import { ThirdPartyService } from '../../../../../app/core/services/abstract/third-party.service';
import * as globals from "@shared/var/enum";

describe('Test class WaiverService', () => {

it('WaiverService-setLastSeasonQB', () => {
// Arguments
const http1 = undefined;
const statsFunctionService1 = undefined;
const api1 = undefined;
const filterService1 = undefined;
const notifyService1 = undefined;

// Method call
const waiverService = new WaiverService(http1, statsFunctionService1, api1, filterService1, notifyService1);
 waiverService.setLastSeasonQB();
});

it('WaiverService-setLastSeasonRB', () => {
// Arguments
const http2 = undefined;
const statsFunctionService2 = undefined;
const api2 = undefined;
const filterService2 = undefined;
const notifyService2 = undefined;

// Method call
const waiverService = new WaiverService(http2, statsFunctionService2, api2, filterService2, notifyService2);
 waiverService.setLastSeasonRB();
});

it('WaiverService-setLastSeasonWR', () => {
// Arguments
const http3 = undefined;
const statsFunctionService3 = undefined;
const api3 = undefined;
const filterService3 = undefined;
const notifyService3 = undefined;

// Method call
const waiverService = new WaiverService(http3, statsFunctionService3, api3, filterService3, notifyService3);
 waiverService.setLastSeasonWR();
});

it('WaiverService-setLastSeasonTE', () => {
// Arguments
const http4 = undefined;
const statsFunctionService4 = undefined;
const api4 = undefined;
const filterService4 = undefined;
const notifyService4 = undefined;

// Method call
const waiverService = new WaiverService(http4, statsFunctionService4, api4, filterService4, notifyService4);
 waiverService.setLastSeasonTE();
});

it('WaiverService-setLastSeasonDEF', () => {
// Arguments
const http5 = undefined;
const statsFunctionService5 = undefined;
const api5 = undefined;
const filterService5 = undefined;
const notifyService5 = undefined;

// Method call
const waiverService = new WaiverService(http5, statsFunctionService5, api5, filterService5, notifyService5);
 waiverService.setLastSeasonDEF();
});

it('WaiverService-setLastSeasonK', () => {
// Arguments
const http6 = undefined;
const statsFunctionService6 = undefined;
const api6 = undefined;
const filterService6 = undefined;
const notifyService6 = undefined;

// Method call
const waiverService = new WaiverService(http6, statsFunctionService6, api6, filterService6, notifyService6);
 waiverService.setLastSeasonK();
});

it('WaiverService-CalculatePointsService', () => {
// Arguments
const http7 = undefined;
const statsFunctionService7 = undefined;
const api7 = undefined;
const filterService7 = undefined;
const notifyService7 = undefined;
const calculatePointsService1 = undefined;

// Property call
const waiverService = new WaiverService(http7, statsFunctionService7, api7, filterService7, notifyService7);
waiverService.CalculatePointsService = calculatePointsService1;
const result = waiverService.CalculatePointsService;

// Expect result
expect(result).equals(calculatePointsService1);
});

it('WaiverService-myTeam', () => {
// Arguments
const http8 = undefined;
const statsFunctionService8 = undefined;
const api8 = undefined;
const filterService8 = undefined;
const notifyService8 = undefined;
const myTeam1 = undefined;

// Property call
const waiverService = new WaiverService(http8, statsFunctionService8, api8, filterService8, notifyService8);
waiverService.myTeam = myTeam1;
const result = waiverService.myTeam;

// Expect result
expect(result).equals(myTeam1);
});

});
